name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1. GitHub 저장소 체크아웃
      - uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 설정 (캐시 포함)
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # 4. 빌드 및 테스트 수행
      - name: Build and Test zariyo-main
        run: ./gradlew :zariyo-main:build

      - name: Build and Test zariyo-queue
        run: ./gradlew :zariyo-queue:build

      # 5. 테스트 결과를 PR에 코멘트로 표시
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'

      # 6. JaCoCo 커버리지 리포트 생성
      - name: Generate test coverage report
        run: ./gradlew jacocoTestReport

      # 7. 커버리지 리포트를 GitHub에 업로드
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/html

      # 8. 디스코드 알림 전송
      - name: Notify Discord
        if: always()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "content": "🚀 GitHub Actions 완료: `${{ github.workflow }}`\n🔀 브랜치: `${{ github.ref_name }}`\n✅ 상태: `${{ job.status }}`\n🔗 [PR/커밋 보기](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}