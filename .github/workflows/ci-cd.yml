name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # main 브랜치에 push되면 build + deploy 실행
  pull_request:
    branches:
      - "**"  # 모든 브랜치에 PR 생성 시 build만 실행

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      # 1. GitHub 저장소 체크아웃
      - name: Checkout source
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 설정 및 캐시
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # 4. zariyo-main 모듈 빌드 및 테스트
      - name: Build and Test zariyo-main
        run: ./gradlew :zariyo-main:build --parallel

      # 5. zariyo-queue 모듈 빌드 및 테스트
      - name: Build and Test zariyo-queue
        run: ./gradlew :zariyo-queue:build --parallel

      # 6. 테스트 결과를 PR 코멘트에 표시
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'

      # 7. JaCoCo 커버리지 리포트 생성
      - name: Generate test coverage report
        run: ./gradlew jacocoTestReport

      # 8. 커버리지 리포트 업로드 (선택적 사용)
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/html

      # 9. Discord로 CI 알림 전송
      - name: Notify Discord (CI)
        if: always()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "content": "✅ CI 완료: `${{ github.workflow }}`\n🔀 브랜치: `${{ github.ref_name }}`\n🔗 [빌드 로그](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy:
    # main 브랜치에 push된 경우에만 실행
    if: github.ref == 'refs/heads/main'

    needs: build
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 저장소 체크아웃
      - name: Checkout source
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. DockerHub 로그인
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. JAR 빌드 (zariyo-main & zariyo-queue)
      - name: Build JARs (zariyo-main & zariyo-queue)
        run: ./gradlew :zariyo-main:clean :zariyo-main:build :zariyo-queue:clean :zariyo-queue:build

      # 5. zariyo-main Docker 이미지 빌드 및 푸시
      - name: Build & Push zariyo-main
        run: |
          docker build --platform linux/amd64 \
            -t ${{ secrets.DOCKER_USERNAME }}/zariyo-main:latest \
            -f zariyo-main/Dockerfile \
            zariyo-main
          docker push ${{ secrets.DOCKER_USERNAME }}/zariyo-main:latest

      # 6. zariyo-queue Docker 이미지 빌드 및 푸시
      - name: Build & Push zariyo-queue
        run: |
          docker build --platform linux/amd64 \
            -t ${{ secrets.DOCKER_USERNAME }}/zariyo-queue:latest \
            -f zariyo-queue/Dockerfile \
            zariyo-queue
          docker push ${{ secrets.DOCKER_USERNAME }}/zariyo-queue:latest

      # 7. Naver Cloud 서버로 SSH 배포
      - name: Deploy to Naver Cloud via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USER }}
          key: ${{ secrets.NCP_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/zariyo-main:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/zariyo-queue:latest

            docker stop zariyo-main || true && docker rm zariyo-main || true
            docker stop zariyo-queue || true && docker rm zariyo-queue || true

            docker run -d --name zariyo-main \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_CLOUD_HOST="${{ secrets.DB_CLOUD_HOST }}" \
              ${{ secrets.DOCKER_USERNAME }}/zariyo-main:latest

            docker run -d --name zariyo-queue \
              -e DB_CLOUD_HOST="${{ secrets.DB_CLOUD_HOST }}" \
              ${{ secrets.DOCKER_USERNAME }}/zariyo-queue:latest

      # 8. Discord로 CD 완료 알림 전송
      - name: Notify Discord (CD)
        if: always()
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "content": "🚀 CD 완료: `${{ github.workflow }}`\n🔀 브랜치: `${{ github.ref_name }}`\n✅ 상태: `${{ job.status }}`\n🔗 [배포 로그](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
